# Rate limiting configuration
limit_req_zone $binary_remote_addr zone=faucet_limit:10m rate=6r/m;

# Define reCAPTCHA secret key
lua_shared_dict captcha_config 1m;
init_by_lua_block {
    ngx.shared.captcha_config:set("secret", "YOUR_RECAPTCHA_SECRET_KEY")
}

server {
    listen 8082;
    server_name localhost;

    # Serve static files
    location / {
        root /usr/share/nginx/html;
        index faucet.html;
        try_files $uri $uri/ /faucet.html;
    }

    # Proxy API requests for faucet balance
    location /wallet/balance {
        #proxy_pass http://host.docker.internal:8000/wallet/balance;
        proxy_pass http://localhost:8000/wallet/balance;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header x-wallet-id id;
    }

    # Proxy API requests for faucet transaction
    location /wallet/simple-send-tx {
        limit_req zone=faucet_limit burst=1 nodelay;
        limit_req_status 429;

        access_by_lua_block {
            local http = require "resty.http"
            local cjson = require "cjson"
            
            -- Get captcha token from header
            local token = ngx.req.get_headers()["X-Captcha-Token"]
            ngx.log(ngx.ERR, "Received captcha token: ", token)
            
            if not token then
                ngx.log(ngx.ERR, "No captcha token provided in headers")
                ngx.status = 400
                ngx.say(cjson.encode({success = false, message = "Captcha token required"}))
                ngx.exit(ngx.HTTP_OK)
            end
            
            -- Get secret key
            local secret = ngx.shared.captcha_config:get("secret")
            ngx.log(ngx.ERR, "Using secret key: ", secret)
            
            -- Verify captcha token
            local httpc = http.new()
            local request_body = ngx.encode_args({
                secret = secret,
                response = token
            })
            ngx.log(ngx.ERR, "Sending request to reCAPTCHA with body: ", request_body)
            
            local res, err = httpc:request_uri("https://www.google.com/recaptcha/api/siteverify", {
                method = "POST",
                body = request_body,
                headers = {
                    ["Content-Type"] = "application/x-www-form-urlencoded"
                }
            })
            
            if err then
                ngx.log(ngx.ERR, "Error making request to reCAPTCHA: ", err)
                ngx.status = 500
                ngx.say(cjson.encode({success = false, error = "Error verifying captcha"}))
                ngx.exit(ngx.HTTP_OK)
            end
            
            ngx.log(ngx.ERR, "reCAPTCHA response status: ", res.status)
            ngx.log(ngx.ERR, "reCAPTCHA response body: ", res.body)
            
            local response_data = cjson.decode(res.body)
            if not res or res.status ~= 200 then
                ngx.log(ngx.ERR, "Invalid response from reCAPTCHA: ", res.status)
                ngx.status = 400
                ngx.say(cjson.encode({success = false, error = "Invalid captcha response"}))
                ngx.exit(ngx.HTTP_OK)
            end
            
            if not response_data.success then
                ngx.log(ngx.ERR, "reCAPTCHA validation failed: ", cjson.encode(response_data))
                ngx.status = 400
                ngx.say(cjson.encode({success = false, error = "Invalid captcha", details = response_data}))
                ngx.exit(ngx.HTTP_OK)
            end
            
            ngx.log(ngx.ERR, "Captcha validation successful")
            
            -- Modify request body to add value
            ngx.req.read_body()
            local body = ngx.req.get_body_data()
            local data = cjson.decode(body)
            data.value = 10000  -- 0.1 HTR = 10000 cents
            local new_body = cjson.encode(data)
            ngx.req.set_body_data(new_body)
        }
        
        #proxy_pass http://host.docker.internal:8000/wallet/simple-send-tx;
        proxy_pass http://localhost:8000/wallet/simple-send-tx;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header x-wallet-id id;
    }
} 