events {
    worker_connections 1024;
}

http {
    lua_package_path '/usr/local/openresty/lualib/?.lua;;';
    
    # Rate limiting configuration
    limit_req_zone $binary_remote_addr zone=blueprint_limit:10m rate=12r/m;
    limit_req_zone $binary_remote_addr zone=faucet_limit:10m rate=6r/m;

    # Define reCAPTCHA secret key
    lua_shared_dict captcha_config 100k;
    init_by_lua_block {
        ngx.shared.captcha_config:set("secret", "6LeIxAcTAAAAAGG-vFI1TnRWxMZNFuojJ4WifJWe")
    }

    server {
        listen 80;
        server_name localhost;

        # Serve static files
        location / {
            root /usr/share/nginx/html;
            index index.html faucet.html;
            try_files $uri $uri/ /index.html;
        }

        # Proxy API requests for blueprint submission
        location /submit-blueprint {
            limit_req zone=blueprint_limit burst=1 nodelay;
            limit_req_status 429;
            
            proxy_pass http://host.docker.internal:8000/wallet/nano-contracts/create-on-chain-blueprint;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header x-wallet-id id;
        }

        # Proxy API requests for faucet balance
        location /wallet/balance {
            proxy_pass http://host.docker.internal:8000/wallet/balance;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header x-wallet-id id;
        }

        # Proxy API requests for faucet transaction
        location /wallet/simple-send-tx {
            limit_req zone=faucet_limit burst=1 nodelay;
            limit_req_status 429;

            access_by_lua_block {
                local http = require "resty.http"
                local cjson = require "cjson"
                
                -- Get captcha token from header
                local token = ngx.req.get_headers()["X-Captcha-Token"]
                if not token then
                    ngx.status = 400
                    ngx.say(cjson.encode({success = false, message = "Captcha token required"}))
                    ngx.exit(ngx.HTTP_OK)
                end
                
                -- Verify captcha token
                local httpc = http.new()
                local res, err = httpc:request_uri("https://www.google.com/recaptcha/api/siteverify", {
                    method = "POST",
                    body = ngx.encode_args({
                        secret = ngx.shared.captcha_config:get("secret"),
                        response = token
                    }),
                    headers = {
                        ["Content-Type"] = "application/x-www-form-urlencoded"
                    }
                })
                
                if not res or res.status ~= 200 or not cjson.decode(res.body).success then
                    ngx.status = 400
                    ngx.say(cjson.encode({success = false, error = "Invalid captcha"}))
                    ngx.exit(ngx.HTTP_OK)
                end
                
                -- Modify request body to add value
                ngx.req.read_body()
                local body = ngx.req.get_body_data()
                local data = cjson.decode(body)
                data.value = 100000  -- 1000 HTR = 100000 cents
                local new_body = cjson.encode(data)
                ngx.req.set_body_data(new_body)
            }
            
            proxy_pass http://host.docker.internal:8000/wallet/simple-send-tx;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Wallet-Id id;
        }
    }
} 
